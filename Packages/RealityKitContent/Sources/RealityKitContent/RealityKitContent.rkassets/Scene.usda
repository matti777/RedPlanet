#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.11.0.1)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["TreeMaterial", "TreeTrunkMaterial", "TerrainMaterial", "Cube", "Capsule"]
    def Material "TerrainMaterial"
    {
        color3f inputs:DistanceFogColor = (0.921431, 0.92145264, 0.921441) (
            colorSpace = "srgb_texture"
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-92.67897, -67.04862)
                    float2 sizeInSubgraph = (179, 53)
                    int stackingOrderInSubgraph = 627
                }
            }
        )
        float inputs:DistanceFogFarDistance = -0.36 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-108.00696, 6.5222836)
                    float2 sizeInSubgraph = (219.5, 53)
                    int stackingOrderInSubgraph = 627
                }
            }
        )
        float inputs:DistanceFogThickness = 0.9 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-117.210754, 77.87241)
                    float2 sizeInSubgraph = (209, 53)
                    int stackingOrderInSubgraph = 627
                }
            }
        )
        float3 inputs:LightDirection = (-1, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-143.29599, 405.29004)
                    float2 sizeInSubgraph = (156, 53)
                    int stackingOrderInSubgraph = 469
                }
            }
        )
        prepend token outputs:mtlx:surface.connect = </Root/TerrainMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:mtlx:surface", "outputs:mtlx:surface", "outputs:mtlx:surface"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (771.90765, 94.00373)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 529

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor.connect = </Root/TerrainMaterial/Distance_Fog.outputs:Output_Color>
            color3f inputs:emissiveColor = (0, 0, 0) (
                colorSpace = "srgb_texture"
            )
            float inputs:ior
            float inputs:metallic
            float3 inputs:normal
            float inputs:occlusion = 1
            float inputs:opacity = 1
            float inputs:opacity.connect = </Root/TerrainMaterial/Distance_Fog.outputs:opacity>
            float inputs:opacityThreshold = 0.1
            float inputs:roughness = 1
            token outputs:out
            float2 ui:nodegraph:node:pos = (537.044, 79.67989)
            float2 ui:nodegraph:node:size = (159.5, 307)
            int ui:nodegraph:node:stackingOrder = 552
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:normal", "Advanced"]
        }

        def NodeGraph "Light_Angle" (
            references = None
        )
        {
            reorder nameChildren = ["DotProduct_1", "Normalize_2", "Normal", "Normalize", "Divide_1"]
            float3 inputs:LightDirection = (-1, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-43.691406, 125.44531)
                        float2 sizeInSubgraph = (156, 53)
                        int stackingOrderInSubgraph = 472
                    }
                }
            )
            float3 inputs:LightDirection.connect = </Root/TerrainMaterial.inputs:LightDirection>
            float outputs:AngleFactor = 0.7 (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 336
                    }
                }
            )
            float outputs:AngleFactor.connect = </Root/TerrainMaterial/Light_Angle/Add.outputs:out>
            float2 ui:nodegraph:node:pos = (-38.07422, 282.86456)
            float2 ui:nodegraph:node:size = (127, 109)
            int ui:nodegraph:node:stackingOrder = 558
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Angle", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (948.6914, 69.46484)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 453

            def Shader "DotProduct_1"
            {
                uniform token info:id = "ND_dotproduct_vector3"
                float3 inputs:in1.connect = </Root/TerrainMaterial/Light_Angle/Normalize_2.outputs:out>
                float3 inputs:in2.connect = </Root/TerrainMaterial/Light_Angle/Normalize.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (361.60547, 82.86719)
                float2 ui:nodegraph:node:size = (166, 53)
                int ui:nodegraph:node:stackingOrder = 431
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-46.34375, 40.16797)
                float2 ui:nodegraph:node:size = (128.5, 40)
                int ui:nodegraph:node:stackingOrder = 470
            }

            def Shader "Normalize"
            {
                uniform token info:id = "ND_normalize_vector3"
                float3 inputs:in.connect = </Root/TerrainMaterial/Light_Angle.inputs:LightDirection>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (153.82422, 121.19922)
                float2 ui:nodegraph:node:size = (149, 40)
                int ui:nodegraph:node:stackingOrder = 342
            }

            def Shader "Normalize_2"
            {
                uniform token info:id = "ND_normalize_vector3"
                float3 inputs:in.connect = </Root/TerrainMaterial/Light_Angle/Normal.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (158.40625, 40.16797)
                float2 ui:nodegraph:node:size = (164.5, 53)
                int ui:nodegraph:node:stackingOrder = 468
            }

            def Shader "Clamp"
            {
                uniform token info:id = "ND_clamp_float"
                float inputs:high
                float inputs:in.connect = </Root/TerrainMaterial/Light_Angle/DotProduct_1.outputs:out>
                float inputs:low = 0
                float outputs:out
                float2 ui:nodegraph:node:pos = (529.90234, 86.984375)
                float2 ui:nodegraph:node:size = (91, 145)
                int ui:nodegraph:node:stackingOrder = 475
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/TerrainMaterial/Light_Angle/Clamp.outputs:out>
                float inputs:in2 = 2.8
                float inputs:in2.connect = None
                float outputs:out
                float2 ui:nodegraph:node:pos = (658.3633, 88.15234)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 478
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/TerrainMaterial/Light_Angle/Multiply.outputs:out>
                float inputs:in2 = 0.2
                float outputs:out
                float2 ui:nodegraph:node:pos = (768.78516, 93.42969)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 477
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }

        def NodeGraph "Steepness_Factor"
        {
            float outputs:Scale (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 249
                    }
                }
            )
            float outputs:Scale.connect = </Root/TerrainMaterial/Steepness_Factor/Sin.outputs:out>
            float2 ui:nodegraph:node:pos = (-496.28564, 244.5403)
            float2 ui:nodegraph:node:size = (164.5, 81)
            int ui:nodegraph:node:stackingOrder = 561
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Scale", "outputs:Scale", "outputs:Scale", "outputs:Scale"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (826.78125, 65.15625)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (136, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 335

            def Shader "Normal"
            {
                uniform token info:id = "ND_normal_vector3"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (33.535156, 73.890625)
                float2 ui:nodegraph:node:size = (128.5, 40)
                int ui:nodegraph:node:stackingOrder = 331
            }

            def Shader "Separate3"
            {
                uniform token info:id = "ND_separate3_vector3"
                float3 inputs:in.connect = </Root/TerrainMaterial/Steepness_Factor/Normal.outputs:out>
                float outputs:outx
                float outputs:outy
                float outputs:outz
                float2 ui:nodegraph:node:pos = (281.4961, 81.70703)
                float2 ui:nodegraph:node:size = (115.5, 145)
                int ui:nodegraph:node:stackingOrder = 329
            }

            def Shader "Range"
            {
                uniform token info:id = "ND_range_float"
                bool inputs:doclamp = 1
                float inputs:in.connect = </Root/TerrainMaterial/Steepness_Factor/Separate3.outputs:outy>
                float inputs:inhigh
                float inputs:inlow = 0.7
                float inputs:outhigh = 0.75
                float inputs:outlow = 0
                float outputs:out
                float2 ui:nodegraph:node:pos = (464.6914, 92.97656)
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 340
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def Shader "Sin"
            {
                uniform token info:id = "ND_sin_float"
                float inputs:in.connect = </Root/TerrainMaterial/Steepness_Factor/Range.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (655.4219, 117.52734)
                float2 ui:nodegraph:node:size = (116, 40)
                int ui:nodegraph:node:stackingOrder = 335
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }

        def Shader "Red_Sand_Texture"
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @Materials/red_sand_ground.jpg@
            string inputs:filtertype
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-450.8672, 52.484375)
            float2 ui:nodegraph:node:size = (168.5, 199)
            int ui:nodegraph:node:stackingOrder = 440
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord"]
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_color3FA"
            color3f inputs:in1.connect = </Root/TerrainMaterial/Mix.outputs:out>
            float inputs:in2.connect = </Root/TerrainMaterial/Light_Angle.outputs:AngleFactor>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-16.56896, 136.85959)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 563
        }

        def Shader "Stone_Texture"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default
            asset inputs:file = @Materials/red_mountain_rock.jpg@
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-474.71997, 404.18597)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 625
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg.connect = </Root/TerrainMaterial/Stone_Texture.outputs:out>
            color3f inputs:fg.connect = </Root/TerrainMaterial/Red_Sand_Texture.outputs:out>
            prepend float inputs:mix.connect = </Root/TerrainMaterial/Steepness_Factor.outputs:Scale>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-267.55273, 238.14977)
            float2 ui:nodegraph:node:size = (109, 145)
            int ui:nodegraph:node:stackingOrder = 446
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def NodeGraph "Distance_Fog"
        {
            reorder nameChildren = ["Exp", "View_Space_position"]
            color3f inputs:DistanceFogColor = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (123.00186, 140.11722)
                        float2 sizeInSubgraph = (179, 53)
                        int stackingOrderInSubgraph = 1193
                    }
                }
            )
            color3f inputs:DistanceFogColor.connect = </Root/TerrainMaterial.inputs:DistanceFogColor>
            float inputs:DistanceFogFarDistance = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-110.17578, -108.63672)
                        float2 sizeInSubgraph = (219.5, 53)
                        int stackingOrderInSubgraph = 1199
                    }
                }
            )
            float inputs:DistanceFogFarDistance.connect = </Root/TerrainMaterial.inputs:DistanceFogFarDistance>
            float inputs:DistanceFogThickness = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-155.53516, 231.99219)
                        float2 sizeInSubgraph = (209, 53)
                        int stackingOrderInSubgraph = 1214
                    }
                }
            )
            float inputs:DistanceFogThickness.connect = </Root/TerrainMaterial.inputs:DistanceFogThickness>
            color3f inputs:InputColor = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (128.64319, 68.04141)
                        float2 sizeInSubgraph = (133.5, 53)
                        int stackingOrderInSubgraph = 1195
                    }
                }
            )
            color3f inputs:InputColor.connect = </Root/TerrainMaterial/Multiply_2.outputs:out>
            float outputs:opacity (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 1204
                    }
                }
            )
            float outputs:opacity.connect = </Root/TerrainMaterial/Distance_Fog/Ifgreater.outputs:out>
            color3f outputs:Output_Color.connect = </Root/TerrainMaterial/Distance_Fog/Mix.outputs:out>
            float2 ui:nodegraph:node:pos = (258.08023, 102.059685)
            float2 ui:nodegraph:node:size = (180.5, 181)
            int ui:nodegraph:node:stackingOrder = 559
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Output_Color", "outputs:Output_Color", "inputs:DistanceFogNearDistance", "outputs:Opacity"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (604.8843, -43.130524)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (208.99734, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1206

            def Shader "Exp"
            {
                uniform token info:id = "ND_exp_float"
                float inputs:in.connect = </Root/TerrainMaterial/Distance_Fog/Multiply.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (184.97865, 215.52919)
                float2 ui:nodegraph:node:size = (114.5, 40)
                int ui:nodegraph:node:stackingOrder = 1045
            }

            def Shader "Mix"
            {
                uniform token info:id = "ND_mix_color3"
                color3f inputs:bg.connect = </Root/TerrainMaterial/Distance_Fog.inputs:DistanceFogColor>
                color3f inputs:fg.connect = </Root/TerrainMaterial/Distance_Fog.inputs:InputColor>
                float inputs:mix.connect = </Root/TerrainMaterial/Distance_Fog/Exp.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (376.64072, 122.17674)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 1029
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/TerrainMaterial/Distance_Fog/Distance_From_Camera.outputs:Subtract_out>
                float inputs:in2.connect = </Root/TerrainMaterial/Distance_Fog.inputs:DistanceFogThickness>
                float outputs:out
                float2 ui:nodegraph:node:pos = (55.33203, 208.98438)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1175
            }

            def Shader "Ifgreater"
            {
                uniform token info:id = "ND_ifgreater_float"
                float inputs:in1
                float inputs:in2 = 1
                float inputs:value1.connect = </Root/TerrainMaterial/Distance_Fog.inputs:DistanceFogFarDistance>
                float inputs:value2.connect = </Root/TerrainMaterial/Distance_Fog/Distance_From_Camera.outputs:Subtract_out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (115.91797, -85.28125)
                float2 ui:nodegraph:node:size = (109, 163)
                int ui:nodegraph:node:stackingOrder = 1205
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1"]
            }

            def NodeGraph "Distance_From_Camera"
            {
                prepend float outputs:Subtract_out.connect = </Root/TerrainMaterial/Distance_Fog/Distance_From_Camera/Subtract.outputs:out>
                float2 ui:nodegraph:node:pos = (-161.89764, 46.695312)
                float2 ui:nodegraph:node:size = (201, 81)
                int ui:nodegraph:node:stackingOrder = 1217
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (821.5, 50)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (161, 81)

                def Shader "Magnitude"
                {
                    uniform token info:id = "ND_magnitude_vector3"
                    float3 inputs:in.connect = </Root/TerrainMaterial/Distance_Fog/Distance_From_Camera/Subtract_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (476, 50)
                    float2 ui:nodegraph:node:size = (152, 40)
                    int ui:nodegraph:node:stackingOrder = 1483
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/TerrainMaterial/Distance_Fog/Distance_From_Camera/Magnitude.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (642.75, 50)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 1484
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Subtract_1"
                {
                    uniform token info:id = "ND_subtract_vector3"
                    float3 inputs:in1.connect = </Root/TerrainMaterial/Distance_Fog/Distance_From_Camera/Position.outputs:out>
                    float3 inputs:in2.connect = </Root/TerrainMaterial/Distance_Fog/Distance_From_Camera/CameraPosition.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (309.25, 50)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 1483
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Position"
                {
                    uniform token info:id = "ND_position_vector3"
                    string inputs:space = "world"
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (109.25, 20)
                    float2 ui:nodegraph:node:size = (133.5, 40)
                    int ui:nodegraph:node:stackingOrder = 1483
                }

                def Shader "CameraPosition"
                {
                    uniform token info:id = "ND_realitykit_cameraposition_vector3"
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (109.25, 126.5)
                    float2 ui:nodegraph:node:size = (218.5, 53)
                    int ui:nodegraph:node:stackingOrder = 1483
                }
            }
        }
    }

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0.52359885, 0)
        }
    )
    {
        rel material:binding = </Root/TerrainMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (0.9659258, 0, 0.25881904, 0)
        float3 xformOp:translate = (0.0049062967, 0.021576911, 0.009000123)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Capsule "Capsule" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/TreeMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        float3 xformOp:translate = (0.07468665, 0.027083814, -0.24809721)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Capsule/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Material "TreeMaterial" (
        references = None
    )
    {
        color3f inputs:DistanceFogColor = (0.837418, 0.8374378, 0.83742714) (
            colorSpace = "srgb_texture"
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-235.91763, -205.80107)
                    float2 sizeInSubgraph = (179, 53)
                    int stackingOrderInSubgraph = 880
                }
            }
        )
        float inputs:DistanceFogFarDistance = -0.9 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-245.87857, -135.16045)
                    float2 sizeInSubgraph = (219.5, 53)
                    int stackingOrderInSubgraph = 865
                }
            }
        )
        float inputs:DistanceFogThickness = 0.1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-248.51529, -56.35185)
                    float2 sizeInSubgraph = (209, 53)
                    int stackingOrderInSubgraph = 865
                }
            }
        )
        float3 inputs:LightDirection = (-1, 0, 0) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-482.0183, 156.50067)
                    float2 sizeInSubgraph = (156, 53)
                    int stackingOrderInSubgraph = 666
                }
            }
        )
        delete float outputs:AngleFactor.connect = </Root/TreeMaterial/Add.outputs:out>
        prepend token outputs:mtlx:surface.connect = </Root/TreeMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (575.7993, -139.23422)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 117)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 864

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/TreeMaterial/Distance_Fog.outputs:Output_Color>
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity.connect = </Root/TreeMaterial/Distance_Fog.outputs:opacity>
            float inputs:opacityThreshold = 0.1
            float inputs:roughness = 1
            token outputs:out
            float2 ui:nodegraph:node:pos = (361.07275, -113.66)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 864
        }

        over "Normalize" (
            active = false
        )
        {
            float2 ui:nodegraph:node:size = (149, 40)
            int ui:nodegraph:node:stackingOrder = 627
        }

        over "DotProduct_1" (
            active = false
        )
        {
            float2 ui:nodegraph:node:size = (166, 53)
            int ui:nodegraph:node:stackingOrder = 627
        }

        over "Normalize_2" (
            active = false
        )
        {
            float3 inputs:in
            float2 ui:nodegraph:node:size = (164.5, 53)
            int ui:nodegraph:node:stackingOrder = 627
        }

        over "Normal" (
            active = false
        )
        {
            float2 ui:nodegraph:node:size = (128.5, 40)
            int ui:nodegraph:node:stackingOrder = 627
        }

        over "Add" (
            active = false
        )
        {
            float inputs:in1
            float2 ui:nodegraph:node:size = (61.5, 36.5)
            int ui:nodegraph:node:stackingOrder = 627
        }

        over "Clamp" (
            active = false
        )
        {
            float inputs:in
            float2 ui:nodegraph:node:size = (91, 145)
            int ui:nodegraph:node:stackingOrder = 627
        }

        over "Multiply" (
            active = false
        )
        {
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 627
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @textures/3DModel_Retopo.jpg@
            string inputs:filtertype
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-485.82074, -56.580147)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 653
        }

        def NodeGraph "Light_Angle" (
            references = @Scene.usda@</Root/TerrainMaterial/Light_Angle>
        )
        {
            reorder nameChildren = ["DotProduct_1", "Normalize_2", "Normal", "Normalize", "Divide_1"]
            float3 inputs:LightDirection = (-1, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-43.691406, 125.44531)
                        float2 sizeInSubgraph = (156, 53)
                        int stackingOrderInSubgraph = 472
                    }
                }
            )
            float3 inputs:LightDirection.connect = </Root/TreeMaterial.inputs:LightDirection>
            float outputs:AngleFactor = 0.7 (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 336
                    }
                }
            )
            float outputs:AngleFactor.connect = </Root/TreeMaterial/Light_Angle/Add.outputs:out>
            float2 ui:nodegraph:node:pos = (-286.79285, 136.31758)
            float2 ui:nodegraph:node:size = (127, 109)
            int ui:nodegraph:node:stackingOrder = 865
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Angle", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor", "outputs:AngleFactor"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (948.6914, 69.46484)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (160, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 453

            def Shader "DotProduct_1"
            {
                uniform token info:id = "ND_dotproduct_vector3"
                float3 inputs:in1.connect = </Root/TreeMaterial/Light_Angle/Normalize_2.outputs:out>
                float3 inputs:in2.connect = </Root/TreeMaterial/Light_Angle/Normalize.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (361.60547, 82.86719)
                float2 ui:nodegraph:node:size = (166, 53)
                int ui:nodegraph:node:stackingOrder = 431
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-46.34375, 40.16797)
                float2 ui:nodegraph:node:size = (128.5, 40)
                int ui:nodegraph:node:stackingOrder = 470
            }

            def Shader "Normalize"
            {
                uniform token info:id = "ND_normalize_vector3"
                float3 inputs:in.connect = </Root/TreeMaterial/Light_Angle.inputs:LightDirection>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (153.82422, 121.19922)
                float2 ui:nodegraph:node:size = (149, 40)
                int ui:nodegraph:node:stackingOrder = 342
            }

            def Shader "Normalize_2"
            {
                uniform token info:id = "ND_normalize_vector3"
                float3 inputs:in.connect = </Root/TreeMaterial/Light_Angle/Normal.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (158.40625, 40.16797)
                float2 ui:nodegraph:node:size = (164.5, 53)
                int ui:nodegraph:node:stackingOrder = 468
            }

            def Shader "Clamp"
            {
                uniform token info:id = "ND_clamp_float"
                float inputs:high
                float inputs:in.connect = </Root/TreeMaterial/Light_Angle/DotProduct_1.outputs:out>
                float inputs:low = 0
                float outputs:out
                float2 ui:nodegraph:node:pos = (529.90234, 86.984375)
                float2 ui:nodegraph:node:size = (91, 145)
                int ui:nodegraph:node:stackingOrder = 475
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/TreeMaterial/Light_Angle/Clamp.outputs:out>
                float inputs:in2 = 3
                float inputs:in2.connect = None
                float outputs:out
                float2 ui:nodegraph:node:pos = (658.3633, 88.15234)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 478
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/TreeMaterial/Light_Angle/Multiply.outputs:out>
                float inputs:in2 = 0.2
                float outputs:out
                float2 ui:nodegraph:node:pos = (768.78516, 93.42969)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 477
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_color3FA"
            color3f inputs:in1.connect = </Root/TreeMaterial/Image.outputs:out>
            float inputs:in2.connect = </Root/TreeMaterial/Light_Angle.outputs:AngleFactor>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-129.58112, 6.6310015)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 662
        }

        def NodeGraph "Distance_Fog" (
            references = @Scene.usda@</Root/TerrainMaterial/Distance_Fog>
        )
        {
            reorder nameChildren = ["Exp", "View_Space_position"]
            color3f inputs:DistanceFogColor = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (123.00186, 140.11722)
                        float2 sizeInSubgraph = (179, 53)
                        int stackingOrderInSubgraph = 1193
                    }
                }
            )
            color3f inputs:DistanceFogColor.connect = </Root/TreeMaterial.inputs:DistanceFogColor>
            float inputs:DistanceFogFarDistance = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-110.17578, -108.63672)
                        float2 sizeInSubgraph = (219.5, 53)
                        int stackingOrderInSubgraph = 1199
                    }
                }
            )
            float inputs:DistanceFogFarDistance.connect = </Root/TreeMaterial.inputs:DistanceFogFarDistance>
            float inputs:DistanceFogThickness = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-155.53516, 231.99219)
                        float2 sizeInSubgraph = (209, 53)
                        int stackingOrderInSubgraph = 1214
                    }
                }
            )
            float inputs:DistanceFogThickness.connect = </Root/TreeMaterial.inputs:DistanceFogThickness>
            color3f inputs:InputColor = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (128.64319, 68.04141)
                        float2 sizeInSubgraph = (133.5, 53)
                        int stackingOrderInSubgraph = 1195
                    }
                }
            )
            color3f inputs:InputColor.connect = </Root/TreeMaterial/Multiply_1.outputs:out>
            float outputs:opacity (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 1204
                    }
                }
            )
            float outputs:opacity.connect = </Root/TreeMaterial/Distance_Fog/Ifgreater.outputs:out>
            color3f outputs:Output_Color.connect = </Root/TreeMaterial/Distance_Fog/Mix.outputs:out>
            float2 ui:nodegraph:node:pos = (93.38871, -133.4068)
            float2 ui:nodegraph:node:size = (180.5, 181)
            int ui:nodegraph:node:stackingOrder = 829
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Output_Color", "outputs:Output_Color", "inputs:DistanceFogNearDistance", "outputs:Opacity"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (604.8843, -43.130524)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (208.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1206

            def Shader "Exp"
            {
                uniform token info:id = "ND_exp_float"
                float inputs:in.connect = </Root/TreeMaterial/Distance_Fog/Multiply.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (184.97865, 215.52919)
                float2 ui:nodegraph:node:size = (114.5, 40)
                int ui:nodegraph:node:stackingOrder = 1045
            }

            def Shader "Mix"
            {
                uniform token info:id = "ND_mix_color3"
                color3f inputs:bg.connect = </Root/TreeMaterial/Distance_Fog.inputs:DistanceFogColor>
                color3f inputs:fg.connect = </Root/TreeMaterial/Distance_Fog.inputs:InputColor>
                float inputs:mix.connect = </Root/TreeMaterial/Distance_Fog/Exp.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (376.64072, 122.17674)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 1029
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/TreeMaterial/Distance_Fog/Distance_From_Camera.outputs:Subtract_out>
                float inputs:in2.connect = </Root/TreeMaterial/Distance_Fog.inputs:DistanceFogThickness>
                float outputs:out
                float2 ui:nodegraph:node:pos = (55.33203, 208.98438)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1175
            }

            def Shader "Ifgreater"
            {
                uniform token info:id = "ND_ifgreater_float"
                float inputs:in1
                float inputs:in2 = 1
                float inputs:value1.connect = </Root/TreeMaterial/Distance_Fog.inputs:DistanceFogFarDistance>
                float inputs:value2.connect = </Root/TreeMaterial/Distance_Fog/Distance_From_Camera.outputs:Subtract_out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (115.91797, -85.28125)
                float2 ui:nodegraph:node:size = (109, 163)
                int ui:nodegraph:node:stackingOrder = 1205
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1"]
            }

            def NodeGraph "Distance_From_Camera"
            {
                prepend float outputs:Subtract_out.connect = </Root/TreeMaterial/Distance_Fog/Distance_From_Camera/Subtract.outputs:out>
                float2 ui:nodegraph:node:pos = (-161.89764, 46.695312)
                float2 ui:nodegraph:node:size = (201, 81)
                int ui:nodegraph:node:stackingOrder = 1217
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (821.5, 50)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (161, 81)

                def Shader "Magnitude"
                {
                    uniform token info:id = "ND_magnitude_vector3"
                    float3 inputs:in.connect = </Root/TreeMaterial/Distance_Fog/Distance_From_Camera/Subtract_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (476, 50)
                    float2 ui:nodegraph:node:size = (152, 40)
                    int ui:nodegraph:node:stackingOrder = 1483
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = None
                    float inputs:in2.connect = </Root/TreeMaterial/Distance_Fog/Distance_From_Camera/Magnitude.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (642.75, 50)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 1484
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Subtract_1"
                {
                    uniform token info:id = "ND_subtract_vector3"
                    float3 inputs:in1.connect = </Root/TreeMaterial/Distance_Fog/Distance_From_Camera/Position.outputs:out>
                    float3 inputs:in2.connect = </Root/TreeMaterial/Distance_Fog/Distance_From_Camera/CameraPosition.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (309.25, 50)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 1483
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Position"
                {
                    uniform token info:id = "ND_position_vector3"
                    string inputs:space = "world"
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (109.25, 20)
                    float2 ui:nodegraph:node:size = (133.5, 40)
                    int ui:nodegraph:node:stackingOrder = 1483
                }

                def Shader "CameraPosition"
                {
                    uniform token info:id = "ND_realitykit_cameraposition_vector3"
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (109.25, 126.5)
                    float2 ui:nodegraph:node:size = (218.5, 53)
                    int ui:nodegraph:node:stackingOrder = 1483
                }
            }
        }
    }
}

